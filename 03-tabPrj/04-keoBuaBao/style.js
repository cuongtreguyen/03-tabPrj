const VALUES = [
  { id: "scissors", value: "‚úÇÔ∏è" }, //0
  { id: "rock", value: "üî®" }, //1
  { id: "paper", value: " ‚úã" }, //2
];
//ph√¢n t√≠ch logic
//valuePlayer v√† valueComputer => "scissors" | "rock" | "paper"
//t·ª´ ƒë√≥ duyet c√°i VALUES t√¨m d·ª±a id n√†o gi·ªëng
//indexPlayer v√† indexComputer
//khi n√†o th·∫Øng
//0 - 2 = -2 l√† th·∫Øng
//1 - 0 = 1 indexPlayer - indexComputer = 1 || -2 th√¨ th·∫Øng return 1
//2 - 1 = 1
//khi n√†o h√≤a indexPlayer - indexComputer = 0 || th√¨ h√≤a return 0
// c√≤n l·∫°i l√† thua                                          -1

let i = 0;

const handleChange = () => {
  let computer = document.querySelector("#computer");
  computer.textContent = VALUES[i].value;
  computer.setAttribute("data-id", VALUES[i].id);
  i = i === VALUES.length - 1 ? 0 : ++i;
};
let interval = setInterval(handleChange, 1000);
//khi n√≥ ch·∫°y n√≥ tr·∫£ v·ªÅ number ,number n√†y l√† ch√¨a kh√≥a ng·ª´ng th·∫±ng ƒë√≥ l·∫°i

//h√†m compare: h√†m so s√°nh gi√° tr·ªã ph√¢n th·∫Øng2 thua-1  h√≤a 0
const compare = (valuePlayer, valueComputer) => {
  //t√¨m index c·ªßa c√°c value t∆∞∆°ng ·ª©ng
  //c·ªßa m√°y ko p id m√† l√† data-id
  //t·ªïng quan n√≥ cx l√† chu·ªói
  let indexPlayer = VALUES.findIndex((item) => item.id == valuePlayer);
  let indexComputer = VALUES.findIndex((item) => item.id == valueComputer);
  let result = indexPlayer - indexComputer;
  if ([1, -2].includes(result)) return 1;
  else if (result == 0) return 0;
  else return -1;
};

let playerItem = document.querySelectorAll(".user");
//duyet qua cac item c·ªßa ng∆∞·ªùi d√πng
playerItem.forEach((item) => {
  //v√† t·∫•t c·∫£ b·ªçn n√≥ ƒë·ªÅu l·∫Øng nghe s·ª± ki·ªán click
  item.addEventListener("click", (event) => {
    //d·ª´ng m√°y l·∫°i v√† l·∫•y data-id
    clearInterval(interval);
    // l·∫•y data-id
    let computer = document.querySelector("#computer");
    let valueComputer = computer.dataset.id; //getAttribute("data-id");
    //khi m√† a b·∫•m th√¨ m l√†m g√¨?

    //l·∫•y id c·ªßa th·∫±ng v·ª´a nh·∫•n
    let valuePlayer = event.target.id;
    //so s√°nh
    let result = compare(valuePlayer, valueComputer); //1 | 0 || -1
    console.log(result);
    //duy·ªát c√°c n√∫t v√† x√≥a actived
    playerItem.forEach((_item) => {
      _item.classList.remove("actived");
      _item.style.pointerEvents = "none";
    });
    //th√™m actived cho n√∫t v·ª´a nh·∫•n
    event.target.classList.add("actived");
    //k·∫øt lu·∫≠n in th√¥ng b√°o
    let alertDiv = document.createElement("div");
    alertDiv.classList.add("alert");
    let msg = "";
    if (result == 1) {
      msg = "B·∫°n th·∫Øng";
      alertDiv.classList.add("alert-success");
    } else if (result == 0) {
      msg = "B·∫°n h√≤a";
      alertDiv.classList.add("alert-warning");
    } else {
      msg = "B·∫°n thua";
      alertDiv.classList.add("alert-dark");
    }
    alertDiv.textContent = msg;
    document.querySelector(".notification").appendChild(alertDiv);
    //hi·ªán n√∫t ch∆°i l·∫°i
    document.querySelector("#play-again").classList.remove("d-none");
  });
});
// s·ª± ki·ªán click ch∆°i l·∫°i
document.querySelector(".btn-play-again").addEventListener("click", (event) => {
  //kh√¥i ph·ª•c kh√¥ng p reset
  clearInterval(interval);
  interval = setInterval(handleChange, 100);
  //
  playerItem.forEach((item) => {
    item.classList.remove("actived");
    item.style.pointerEvents = "";
  });
  //x√≥a th√¥ng b√°o v√† kh·ªëi n√∫t ch∆°i l·∫°i
  document.querySelector(".notification").innerHTML = "";
  document.querySelector("#play-again").classList.add("d-none");
});
